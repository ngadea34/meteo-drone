<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Calendrier météo des interventions drone — v2 (no-fly, robuste)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Local : python -m http.server 3000 -->
  <!-- Ouvrir : http://localhost:3000/calendrier_meteo_drone_v2.htm -->
  <style>
    :root {
      --bg-color: #121212;
      --fg-color: #e0e0e0;
      --accent-color: #90caf9;
      --border-color: #333;
      --muted: #9aa0a6;
    }
    * { box-sizing: border-box; }
    body {
      background: linear-gradient(180deg,#0f1116,#111624 40%,#0f1116);
      color: var(--fg-color);
      font-family: system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,"Noto Sans",sans-serif;
      margin: 0;
    }
    header {
      padding: 12px 16px;
      border-bottom: 1px solid var(--border-color);
      display: grid;
      grid-template-columns: 1fr auto auto auto;
      gap: 8px 12px;
      align-items: center;
    }
    .controls, .loc-controls { display: flex; flex-wrap: wrap; gap: 8px; align-items: center; }
    .chip { background:#1c2233; border:1px solid #27324a; color:#cfe3ff; padding:6px 10px; border-radius:10px; }
    button, input[type="number"], input[type="text"], select, label {
      background-color: #1b1f2b;
      color: var(--fg-color);
      border: 1px solid var(--border-color);
      padding: 6px 10px;
      border-radius: 8px;
    }
    button { cursor: pointer; }
    button:hover { background-color: #232a3a; }
    input[type="checkbox"]{ transform: scale(1.1); margin-right: 4px; vertical-align: middle; }
    #calendar-container { margin-top: 8px; }
    #weekday-headers, #calendar {
      width: 100%;
      max-width: 1000px;
      margin: 0 auto;
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 1px;
      border: 1px solid var(--border-color);
      border-bottom: none;
    }
    #calendar { border-top: none; border-bottom: 1px solid var(--border-color); grid-auto-rows: minmax(110px,auto); }
    .weekday-header { text-align: center; font-weight: 600; padding: 8px; background-color: #171c29; border-right: 1px solid var(--border-color); }
    .weekday-header:last-child{ border-right: none; }
    .day-cell { padding: 8px; background-color: #101521; border-right: 1px solid var(--border-color); border-bottom: 1px solid var(--border-color); display:flex; flex-direction: column; justify-content: space-between; }
    .day-cell.indisponible { background-color: #1a2233; color: #b8c0cc; }
    .day-cell.today { outline: 2px solid var(--accent-color); outline-offset: -2px; }
    .day-number { font-weight: 700; font-size: .95rem; opacity:.95; }
    .day-info { font-size: .82rem; color: #eef5ff; }
    #status { margin-left: 8px; color: var(--muted); font-size: .9rem; }
    #debug-panel { background:#0f1422; border-top:1px solid #26324b; padding:10px 12px; font: 12px/1.35 ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Courier New", monospace; color:#a6d3ff; max-height: 220px; overflow:auto; }
    #debug-toggle { position: fixed; bottom: 12px; right: 12px; background: var(--accent-color); color:#000; border:0; width: 36px; height: 36px; border-radius: 50%; cursor:pointer; font-weight:700; }
    .muted { color: var(--muted); }
    .row { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
  </style>
</head>
<body>
  <header>
    <div class="row">
      <button id="prev-month">⟵</button>
      <div id="month-label" class="chip" style="min-width:180px;text-align:center">—</div>
      <button id="next-month">⟶</button>
      <button id="today-btn">Aujourd’hui</button>
      <button id="export-ics">Export .ics</button>
      <span id="status" class="muted"></span>
    </div>

    <div class="controls">
      <label>Profil
        <select id="profile-select">
          <option value="inspection">Inspection toiture</option>
          <option value="thermo">Thermographie PV</option>
          <option value="nettoyage">PV Cleaning / Nettoyage</option>
          <option value="pulverisation">Démoussage / Pulvérisation</option>
        </select>
      </label>
      <label>Seuil favorable
        <input type="number" id="threshold-input" min="0" max="100" step="1" style="width:80px">
      </label>
      <label class="row"><input type="checkbox" id="mode-conservateur"> Mode conservateur</label>
      <label class="row"><input type="checkbox" id="mode-hors-ligne"> Mode hors-ligne</label>
    </div>

    <div class="loc-controls">
      <div id="lieu-info" class="chip">Montpellier centre (43.62000, 3.88000)</div>
      <input type="text" id="address-input" placeholder="Saisir une adresse ou ville…">
      <button id="btn-geocode" title="Rechercher l’adresse et centrer">Mettre à jour le lieu</button>
      <button id="btn-setll" title="Saisir lat/lon manuellement">Lat/Lon</button>
    </div>
  </header>

  <div id="calendar-container">
    <div id="weekday-headers">
      <div class="weekday-header">Lun</div>
      <div class="weekday-header">Mar</div>
      <div class="weekday-header">Mer</div>
      <div class="weekday-header">Jeu</div>
      <div class="weekday-header">Ven</div>
      <div class="weekday-header">Sam</div>
      <div class="weekday-header">Dim</div>
    </div>
    <div id="calendar"></div>
  </div>

  <div id="debug-panel">
    <strong>Debug</strong>
    <div id="debug-content"></div>
  </div>
  <button id="debug-toggle">⋯</button>

  <script>
  (function(){
    try {
      /* Profils et seuils par défaut */
      var PROFILES = {
        inspection:     { defaultThreshold: 65, demoussage: { windIdealMax: 25, windHardMax: 50, rainStrict: false, tempMin: 20, tempMax: 35 } },
        thermo:         { defaultThreshold: 70, demoussage: { windIdealMax: 15, windHardMax: 30, rainStrict: false, tempMin: 15, tempMax: 35 } },
        nettoyage:      { defaultThreshold: 70, demoussage: { windIdealMax: 15, windHardMax: 30, rainStrict: false, tempMin: 10, tempMax: 30 } },
        pulverisation:  { defaultThreshold: 75, demoussage: { windIdealMax: 12, windHardMax: 20, rainStrict: true,  tempMin: 8,  tempMax: 30 } }
      };

      /* Seuils vent "no-fly" : au-delà, score=0 pour le profil sélectionné */
      var HARD_WIND_MAX = {
        inspection: 45,  // km/h
        thermo: 35,
        nettoyage: 40,
        pulverisation: 20
      };

      /* État */
      var currentDate = new Date(); currentDate.setDate(1); currentDate.setHours(0,0,0,0);
      var lieu = { lat: 43.62, lon: 3.8799996, name: 'Montpellier centre' };
      var modeConservateur = false;
      var modeHorsLigne = false;
      var profile = 'inspection';
      var seuilFavorable = PROFILES[profile].defaultThreshold;

      // Restauration du lieu (localStorage)
      try{
        var raw=localStorage.getItem('calLieu');
        if(raw){
          var o=JSON.parse(raw);
          if(o && typeof o.lat==='number' && typeof o.lon==='number'){
            lieu.lat=o.lat; lieu.lon=o.lon; if(o.name) lieu.name=o.name;
          }
        }
      }catch(_e){}

      /* Debug */
      var debug = { urls:[], statusCodes:[], renderedCells:0, daysAggregated:0, errors:[] };

      /* DOM */
      var prevBtn = document.getElementById('prev-month');
      var nextBtn = document.getElementById('next-month');
      var todayBtn = document.getElementById('today-btn');
      var exportBtn = document.getElementById('export-ics');
      var profileSelect = document.getElementById('profile-select');
      var thresholdInput = document.getElementById('threshold-input');
      var conservCheckbox = document.getElementById('mode-conservateur');
      var offlineCheckbox = document.getElementById('mode-hors-ligne');
      var calendarEl = document.getElementById('calendar');
      var debugContent = document.getElementById('debug-content');
      var debugToggle = document.getElementById('debug-toggle');
      var debugPanel = document.getElementById('debug-panel');
      var monthLabel = document.getElementById('month-label');
      var statusEl = document.getElementById('status');
      var addressInput = document.getElementById('address-input');
      var btnGeocode = document.getElementById('btn-geocode');
      var btnSetLL = document.getElementById('btn-setll');
      var lieuInfo = document.getElementById('lieu-info');

      function updateLieuInfo(){ lieuInfo.textContent = (lieu.name||'Lieu') + ' (' + lieu.lat.toFixed(5) + ', ' + lieu.lon.toFixed(5) + ')'; }
      function persistLieu(){ try{ localStorage.setItem('calLieu', JSON.stringify({lat:lieu.lat, lon:lieu.lon, name:lieu.name||''})); }catch(_e){} }
      updateLieuInfo();
      thresholdInput.value = String(seuilFavorable);

      /* UI */
      debugToggle.addEventListener('click', function(){
        debugPanel.style.display = (debugPanel.style.display === 'none') ? 'block' : 'none';
      });

      prevBtn.addEventListener('click', function(){ currentDate.setMonth(currentDate.getMonth() - 1); render(); });
      nextBtn.addEventListener('click', function(){ currentDate.setMonth(currentDate.getMonth() + 1); render(); });
      todayBtn.addEventListener('click', function(){ var t = new Date(); t.setDate(1); t.setHours(0,0,0,0); currentDate = t; render(); });
      profileSelect.addEventListener('change', function(){ profile = profileSelect.value; seuilFavorable = PROFILES[profile].defaultThreshold; thresholdInput.value = String(seuilFavorable); render(); });
      thresholdInput.addEventListener('input', function(){ var v = parseInt(thresholdInput.value, 10); if (!isNaN(v) && v >= 0 && v <= 100) { seuilFavorable = v; render(false); } });
      conservCheckbox.addEventListener('change', function(){ modeConservateur = conservCheckbox.checked; render(false); });
      offlineCheckbox.addEventListener('change', function(){ modeHorsLigne = offlineCheckbox.checked; render(); });
      exportBtn.addEventListener('click', exportICS);

      btnGeocode.addEventListener('click', setLocationFromAddress);
      btnSetLL.addEventListener('click', function(){
        var lat = prompt('Latitude ?', String(lieu.lat));
        var lon = prompt('Longitude ?', String(lieu.lon));
        if(lat && lon && !isNaN(parseFloat(lat)) && !isNaN(parseFloat(lon))){
          lieu.lat=parseFloat(lat); lieu.lon=parseFloat(lon); lieu.name='Coordonnées manuelles';
          persistLieu(); updateLieuInfo(); render();
        }
      });

      /* Utils */
      function addDays(date, days){ var d=new Date(date); d.setDate(d.getDate()+days); return d; }
      function formatDateYYYYMMDD(date){ var y=date.getFullYear(); var m=('0'+(date.getMonth()+1)).slice(-2); var d=('0'+date.getDate()).slice(-2); return y+'-'+m+'-'+d; }
      function monthFR(d){ try { return d.toLocaleString('fr-FR',{month:'long',year:'numeric'}); } catch(_e){ return d.getFullYear()+'-'+(d.getMonth()+1); } }

      /* Géocodage OSM/Nominatim */
      async function geocodeAddress(q){
        var u = new URL('https://nominatim.openstreetmap.org/search');
        u.searchParams.set('q', q); u.searchParams.set('format', 'json'); u.searchParams.set('limit', '1');
        var res = await fetch(u.toString(), { headers: { 'Accept': 'application/json' } });
        if(!res.ok) throw new Error('Geocode HTTP '+res.status);
        var arr = await res.json();
        if(!arr || !arr.length) throw new Error('Adresse introuvable');
        return { lat: parseFloat(arr[0].lat), lon: parseFloat(arr[0].lon), name: arr[0].display_name };
      }

      async function setLocationFromAddress(){
        var q = addressInput.value.trim();
        if(!q) { alert('Saisis une adresse ou une ville.'); return; }
        try{
          statusEl.textContent = 'Géocodage…';
          var r = await geocodeAddress(q);
          lieu.lat = r.lat; lieu.lon = r.lon; lieu.name = r.name || q;
          persistLieu(); updateLieuInfo();
          statusEl.textContent = 'Lieu mis à jour.';
          render();
        }catch(e){
          statusEl.textContent = 'Erreur géocodage';
          alert('Adresse introuvable ou service indisponible : '+ (e && e.message ? e.message : e));
        }
      }

      /* Fetch météo (cap J+15 + skip passé + segmentation ≤16j) */
      async function fetchWeather(startDate, endDate){
        var today=new Date(); today.setHours(0,0,0,0);
        var horizon=addDays(today,15);

        var realStart = startDate < today ? today : startDate;
        var realEnd   = endDate   > horizon ? horizon : endDate;
        if (realStart > realEnd) return { daily:{ time:[] } };

        var allData = { daily:{ time:[], precipitation_sum:[], rain_sum:[], wind_gusts_10m_max:[], temperature_2m_max:[], temperature_2m_min:[], cloudcover_mean:[], shortwave_radiation_sum:[] } };

        var cur=new Date(realStart);
        var fetchPromises=[];
        while(cur<=realEnd){
          var segStart=new Date(cur);
          var segEnd = (addDays(segStart,15) < realEnd) ? addDays(segStart,15) : new Date(realEnd);

          var params=new URLSearchParams({
            latitude: String(lieu.lat), longitude: String(lieu.lon),
            daily: 'precipitation_sum,rain_sum,wind_gusts_10m_max,temperature_2m_max,temperature_2m_min,cloudcover_mean,shortwave_radiation_sum',
            timezone: 'Europe/Paris',
            start_date: formatDateYYYYMMDD(segStart),
            end_date: formatDateYYYYMMDD(segEnd)
          });
          var url='https://api.open-meteo.com/v1/forecast?'+params.toString();
          debug.urls.push(url);

          var p = fetch(url).then(function(res){
            debug.statusCodes.push(res.status);
            if(!res.ok) throw new Error('HTTP '+res.status);
            return res.json();
          }).then(function(json){
            var d=json.daily||{};
            ['time','precipitation_sum','rain_sum','wind_gusts_10m_max','temperature_2m_max','temperature_2m_min','cloudcover_mean','shortwave_radiation_sum'].forEach(function(k){
              if(Array.isArray(d[k])) allData.daily[k] = allData.daily[k].concat(d[k]);
            });
          }).catch(function(err){ debug.errors.push({url:url, error:String(err)}); });
          fetchPromises.push(p);

          cur = addDays(segEnd,1);
        }
        await Promise.all(fetchPromises);
        return allData;
      }

      /* Score du JOUR — PROFIL SÉLECTIONNÉ uniquement + coupe vent no-fly */
      function scoreForDay(dayData){
        // Simulation hors-ligne
        if(modeHorsLigne){
          return { score: Math.floor(seuilFavorable) + Math.floor(Math.random()*(101-seuilFavorable)) };
        }

        var wind=Number(dayData.wind_gusts_10m_max||0);                  // km/h
        var rain=Number(dayData.rain_sum != null ? dayData.rain_sum : (dayData.precipitation_sum != null ? dayData.precipitation_sum : 0));
        var irr =(Number(dayData.shortwave_radiation_sum||0))*277.78;    // Wh/m²
        var tmax=Number(dayData.temperature_2m_max||0);
        var tmin=Number(dayData.temperature_2m_min||0);

        // 1) No-fly : vent au-dessus du seuil dur pour le profil → score 0
        var windNoFly = HARD_WIND_MAX[profile] != null ? HARD_WIND_MAX[profile] : 999;
        if (wind >= windNoFly) {
          return { score: 0, flags: { noFlyWind: true } };
        }

        // 2) Score du profil sélectionné (pas de moyenne multi-profils)
        var score = 0;

        if (profile === 'thermo') {
          var windScore1 = wind<=15 ? 1 : (wind>=35 ? 0 : (1-(wind-15)/20));
          var rainScore1 = rain===0 ? 1 : (rain<2 ? 0.6 : 0.1);
          var irrScore1  = irr<=2500 ? (irr/2500) : (irr>=5000 ? 1 : ((irr-2500)/2500));
          var tmean1 = (tmax+tmin)/2;
          var tempScore1 = Math.abs(tmean1-24)>=10 ? 0 : (1-Math.abs(tmean1-24)/10);
          score = (0.35*windScore1 + 0.40*rainScore1 + 0.20*irrScore1 + 0.05*tempScore1) * 100;
        }
        else if (profile === 'nettoyage') {
          var windScore2 = wind<=20 ? 1 : (wind>=40 ? 0 : (1-(wind-20)/20));
          var rainScore2 = rain===0 ? 1 : (rain<1 ? 0.7 : 0.05);
          var tmean2 = (tmax+tmin)/2;
          var tempScore2 = Math.abs(tmean2-22)>=10 ? 0 : (1-Math.abs(tmean2-22)/10);
          score = (0.45*windScore2 + 0.45*rainScore2 + 0.10*tempScore2) * 100;
        }
        else if (profile === 'inspection') {
          var windScore3 = wind<=25 ? 1 : (wind>=50 ? 0 : (1-(wind-25)/25));
          var rainScore3 = rain===0 ? 1 : (rain<2 ? 0.6 : 0.1);
          var tmean3 = (tmax+tmin)/2;
          var tempScore3 = Math.abs(tmean3-20)>=10 ? 0 : (1-Math.abs(tmean3-20)/10);
          score = (0.50*windScore3 + 0.45*rainScore3 + 0.05*tempScore3) * 100;
        }
        else if (profile === 'pulverisation') {
          var prm = PROFILES.pulverisation.demoussage;
          var windScore4 = wind<=prm.windIdealMax ? 1 : (wind>=prm.windHardMax ? 0 : (1-(wind-prm.windIdealMax)/(prm.windHardMax-prm.windIdealMax)));
          var rainScore4 = prm.rainStrict ? (rain===0 ? 1 : 0) : (rain===0 ? 1 : (rain<1 ? 0.7 : 0.1));
          var diff=0; if(tmin<prm.tempMin) diff+=prm.tempMin-tmin; if(tmax>prm.tempMax) diff+=tmax-prm.tempMax;
          var tempScore4 = Math.max(0,1-diff/10);
          score = (0.55*windScore4 + 0.35*rainScore4 + 0.10*tempScore4) * 100;
        }

        // 3) Mode conservateur : petit serrage si on approche des limites (optionnel)
        if (modeConservateur) {
          if (wind >= (0.8*windNoFly) || rain >= 1) score = Math.max(0, score - 10);
        }

        return { score: score };
      }

      /* Rendu */
      async function render(fetchNow){
        if (fetchNow === undefined) fetchNow = true;

        debug.urls=[]; debug.statusCodes=[]; debug.errors=[]; debug.renderedCells=0; debug.daysAggregated=0;
        calendarEl.innerHTML=''; debugContent.textContent='';

        monthLabel.textContent = monthFR(currentDate);

        var y=currentDate.getFullYear(), m=currentDate.getMonth();
        var first=new Date(y,m,1), last=new Date(y,m+1,0);

        var startWeekDay=(first.getDay()+6)%7; // Lun=0
        for(var i=0;i<startWeekDay;i++){ var e=document.createElement('div'); e.className='day-cell indisponible'; calendarEl.appendChild(e); }

        var today=new Date(); today.setHours(0,0,0,0);

        var daysInMonth=last.getDate();
        var minDate=new Date(y,m,1);
        var maxDate=new Date(y,m,daysInMonth);
        var weatherData= fetchNow ? await fetchWeather(minDate,maxDate) : {daily:{time:[]}};
        var wd = (weatherData.daily && Array.isArray(weatherData.daily.time)) ? {} : null;

        if(wd){
          weatherData.daily.time.forEach(function(ts,idx){
            wd[ts]={
              precipitation_sum: Number(weatherData.daily.precipitation_sum && weatherData.daily.precipitation_sum[idx] != null ? weatherData.daily.precipitation_sum[idx] : 0),
              rain_sum: Number(weatherData.daily.rain_sum && weatherData.daily.rain_sum[idx] != null ? weatherData.daily.rain_sum[idx] : (weatherData.daily.precipitation_sum && weatherData.daily.precipitation_sum[idx] != null ? weatherData.daily.precipitation_sum[idx] : 0)),
              wind_gusts_10m_max: Number(weatherData.daily.wind_gusts_10m_max && weatherData.daily.wind_gusts_10m_max[idx] != null ? weatherData.daily.wind_gusts_10m_max[idx] : 0),
              temperature_2m_max: Number(weatherData.daily.temperature_2m_max && weatherData.daily.temperature_2m_max[idx] != null ? weatherData.daily.temperature_2m_max[idx] : 0),
              temperature_2m_min: Number(weatherData.daily.temperature_2m_min && weatherData.daily.temperature_2m_min[idx] != null ? weatherData.daily.temperature_2m_min[idx] : 0),
              cloudcover_mean: Number(weatherData.daily.cloudcover_mean && weatherData.daily.cloudcover_mean[idx] != null ? weatherData.daily.cloudcover_mean[idx] : 0),
              shortwave_radiation_sum: Number(weatherData.daily.shortwave_radiation_sum && weatherData.daily.shortwave_radiation_sum[idx] != null ? weatherData.daily.shortwave_radiation_sum[idx] : 0)
            };
          });
        }

        for(var d=1; d<=daysInMonth; d++){
          var dt=new Date(y,m,d);
          var cell=document.createElement('div'); cell.className='day-cell';
          var dayNum=document.createElement('div'); dayNum.className='day-number'; dayNum.textContent=String(d); cell.appendChild(dayNum);
          if(dt.getTime()===today.getTime()) cell.classList.add('today');

          var infoDiv=document.createElement('div'); infoDiv.className='day-info';
          var dateStr=formatDateYYYYMMDD(dt);

          if(modeHorsLigne){
            var scoreSim = Math.floor(seuilFavorable)+Math.floor(Math.random()*(101-seuilFavorable));
            var catSim = (scoreSim>=seuilFavorable)?'Favorable':(scoreSim>=45?'Limite':'Défavorable');
            var hSim=Math.round((scoreSim/100)*120);
            cell.style.backgroundColor='hsl('+hSim+',72%,50%)'; cell.style.color='#000';
            infoDiv.textContent = catSim+' · mode hors-ligne';
          } else if(wd && wd[dateStr]){
            var res=scoreForDay(wd[dateStr]); var score=Math.round(res.score); debug.daysAggregated++;
            var category = (score>=seuilFavorable)?'Favorable':(score>=45?'Limite':'Défavorable');
            var colorH=Math.round((score/100)*120);
            cell.style.backgroundColor='hsl('+colorH+',72%,50%)'; cell.style.color='#000';
            var extra = (res.flags && res.flags.noFlyWind) ? ' · no-fly vent' : '';
            infoDiv.textContent = category+extra+' · vent '+wd[dateStr].wind_gusts_10m_max+' km/h · pluie '+wd[dateStr].rain_sum+' mm · T° '+wd[dateStr].temperature_2m_min+'-'+wd[dateStr].temperature_2m_max+' °C';
          } else {
            cell.classList.add('indisponible');
            infoDiv.textContent='Météo indisponible';
          }

          cell.appendChild(infoDiv); calendarEl.appendChild(cell); debug.renderedCells++;
        }

        var totalCells=debug.renderedCells+startWeekDay, remainder=totalCells%7;
        if(remainder!==0){ var toAdd=7-remainder; for(var j=0;j<toAdd;j++){ var e2=document.createElement('div'); e2.className='day-cell indisponible'; calendarEl.appendChild(e2); } }

        // Debug
        var L=[];
        L.push('Profil: '+profile);
        L.push('Seuil favorable: '+seuilFavorable);
        L.push('No-fly vent (profil): '+HARD_WIND_MAX[profile]+' km/h');
        L.push('Mode conservateur: '+modeConservateur);
        L.push('Mode hors-ligne: '+modeHorsLigne);
        L.push('Lieu: '+(lieu.name||'Lieu')+' ('+lieu.lat.toFixed(5)+', '+lieu.lon.toFixed(5)+')');
        L.push('URLs: '+debug.urls.length);
        debug.urls.forEach(function(u,i){ L.push('• '+u+' → HTTP '+(debug.statusCodes[i]!=null?debug.statusCodes[i]:'-')); });
        L.push('Jours avec données météo: '+debug.daysAggregated);
        L.push('Cases rendues (jours du mois): '+debug.renderedCells);
        if(debug.errors.length){ L.push('Erreurs:'); debug.errors.forEach(function(e){ L.push('• '+e.url+' → '+e.error); }); }
        debugContent.textContent=L.join('\n');
      }

      /* Export ICS (jours favorables uniquement au regard du profil sélectionné) */
      function exportICS(){
        var y=currentDate.getFullYear(), m=currentDate.getMonth();
        var last=new Date(y,m+1,0), daysInMonth=last.getDate();
        var minDate=new Date(y,m,1), maxDate=new Date(y,m,daysInMonth);

        fetchWeather(minDate,maxDate).then(function(weatherData){
          var wd=(weatherData.daily && Array.isArray(weatherData.daily.time))?{}:null;
          if(wd){
            weatherData.daily.time.forEach(function(ts,idx){
              wd[ts]={
                precipitation_sum: Number(weatherData.daily.precipitation_sum && weatherData.daily.precipitation_sum[idx] != null ? weatherData.daily.precipitation_sum[idx] : 0),
                rain_sum: Number(weatherData.daily.rain_sum && weatherData.daily.rain_sum[idx] != null ? weatherData.daily.rain_sum[idx] : (weatherData.daily.precipitation_sum && weatherData.daily.precipitation_sum[idx] != null ? weatherData.daily.precipitation_sum[idx] : 0)),
                wind_gusts_10m_max: Number(weatherData.daily.wind_gusts_10m_max && weatherData.daily.wind_gusts_10m_max[idx] != null ? weatherData.daily.wind_gusts_10m_max[idx] : 0),
                temperature_2m_max: Number(weatherData.daily.temperature_2m_max && weatherData.daily.temperature_2m_max[idx] != null ? weatherData.daily.temperature_2m_max[idx] : 0),
                temperature_2m_min: Number(weatherData.daily.temperature_2m_min && weatherData.daily.temperature_2m_min[idx] != null ? weatherData.daily.temperature_2m_min[idx] : 0),
                cloudcover_mean: Number(weatherData.daily.cloudcover_mean && weatherData.daily.cloudcover_mean[idx] != null ? weatherData.daily.cloudcover_mean[idx] : 0),
                shortwave_radiation_sum: Number(weatherData.daily.shortwave_radiation_sum && weatherData.daily.shortwave_radiation_sum[idx] != null ? weatherData.daily.shortwave_radiation_sum[idx] : 0)
              };
            });
          }

          var events=[];
          for(var d=1; d<=daysInMonth; d++){
            var dt=new Date(y,m,d), dateStr=formatDateYYYYMMDD(dt);
            if(wd && wd[dateStr]){
              var score=Math.round(scoreForDay(wd[dateStr]).score);
              if(score>=seuilFavorable){
                var dtstart=dateStr.replace(/-/g,'');
                var dtendDate=new Date(dt); dtendDate.setDate(dt.getDate()+1);
                var dtend=dtendDate.toISOString().slice(0,10).replace(/-/g,'');
                var desc='Vent: '+wd[dateStr].wind_gusts_10m_max+' km/h\\nPluie: '+wd[dateStr].rain_sum+' mm\\nT°: '+wd[dateStr].temperature_2m_min+'-'+wd[dateStr].temperature_2m_max+' °C\\nNébulosité: '+wd[dateStr].cloudcover_mean+'%\\nIrradiance: '+Math.round((wd[dateStr].shortwave_radiation_sum||0)*277.78)+' Wh/m²';
                events.push('BEGIN:VEVENT\\nDTSTART;VALUE=DATE:'+dtstart+'\\nDTEND;VALUE=DATE:'+dtend+'\\nSUMMARY:Fenêtre météo favorable ('+score+') — '+(lieu.name||'Lieu')+'\\nDESCRIPTION:'+desc+'\\nEND:VEVENT');
              }
            }
          }
          if(events.length===0){ alert('Aucun jour favorable à exporter ce mois.'); return; }
          var ics=['BEGIN:VCALENDAR','VERSION:2.0','PRODID:-//Calendrier Meteo Drone//FR'].concat(events).concat('END:VCALENDAR').join('\\r\\n');
          var blob=new Blob([ics],{type:'text/calendar;charset=utf-8'});
          var url=URL.createObjectURL(blob); var a=document.createElement('a');
          a.href=url; a.download='favorable_'+y+'_'+('0'+(m+1)).slice(-2)+'.ics'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
        });
      }

      // Premier rendu
      render();
    } catch (e) {
      var d=document.getElementById('debug-content');
      if (d) d.textContent = 'ERREUR INIT JS : '+(e && e.stack ? e.stack : e);
      console.error(e);
    }
  })();
  </script>
</body>
</html>
